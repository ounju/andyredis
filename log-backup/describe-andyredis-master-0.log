Name:           andyredis-master-0
Namespace:      default
Priority:       0
Node:           ip-10-101-28-107.ap-northeast-2.compute.internal/10.101.28.107
Start Time:     Wed, 18 Dec 2019 15:01:14 +0900
Labels:         app=redis
                chart=redis-10.2.1
                controller-revision-hash=andyredis-master-57c68cf84d
                release=andyredis
                role=master
                statefulset.kubernetes.io/pod-name=andyredis-master-0
Annotations:    checksum/configmap: 702c830278588210f5aaae31e48cdc688c50255a5dfc01aa4256a275881bdfb3
                checksum/health: 42031b9e27e760ddd36601f4f04a60e397bf233bed642eb05a32a6d3fa2545c9
                checksum/secret: 4a6fe110dd9c2f2e864fbe1b41e4711203cf28b252c80dd9d070ef7328149d11
                kubernetes.io/psp: eks.privileged
                prometheus.io/port: 9121
                prometheus.io/scrape: true
Status:         Running
IP:             10.101.28.202
IPs:            <none>
Controlled By:  StatefulSet/andyredis-master
Containers:
  andyredis:
    Container ID:  docker://397033bb90d3d327c26a8a07b5b93603ebecd8a623cdb17d9a6145cb2a966dcf
    Image:         docker.io/bitnami/redis:5.0.7-debian-9-r12
    Image ID:      docker-pullable://bitnami/redis@sha256:9b1e87eec7414992d997f95f86b3a678cb7d0220e231fc2ac92702d4584e25ff
    Port:          6379/TCP
    Host Port:     0/TCP
    Command:
      /bin/bash
      -c
      if [[ -n $REDIS_PASSWORD_FILE ]]; then
        password_aux=`cat ${REDIS_PASSWORD_FILE}`
        export REDIS_PASSWORD=$password_aux
      fi
      if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
      fi
      if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
      fi
      ARGS=("--port" "${REDIS_PORT}")
      ARGS+=("--requirepass" "${REDIS_PASSWORD}")
      ARGS+=("--masterauth" "${REDIS_PASSWORD}")
      ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
      ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
      /run.sh ${ARGS[@]}
      
    State:          Running
      Started:      Wed, 18 Dec 2019 15:01:24 +0900
    Ready:          True
    Restart Count:  0
    Liveness:       exec [sh -c /health/ping_liveness_local.sh 5] delay=5s timeout=5s period=5s #success=1 #failure=5
    Readiness:      exec [sh -c /health/ping_readiness_local.sh 5] delay=5s timeout=1s period=5s #success=1 #failure=5
    Environment:
      REDIS_REPLICATION_MODE:  master
      REDIS_PASSWORD:          <set to the key 'redis-password' in secret 'andyredis'>  Optional: false
      REDIS_PORT:              6379
    Mounts:
      /data from redis-data (rw)
      /health from health (rw)
      /opt/bitnami/redis/etc/ from redis-tmp-conf (rw)
      /opt/bitnami/redis/mounted-etc from config (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-85z8c (ro)
  sentinel:
    Container ID:  docker://608db6c0ce960b047400f44ace5711fe85af0c8174ec8132598be8e721ea0be0
    Image:         docker.io/bitnami/redis-sentinel:5.0.7-debian-9-r10
    Image ID:      docker-pullable://bitnami/redis-sentinel@sha256:6eb064dc0dc01aa23bf15dfe83f2048bf6047ad6e363a5a38b1d6975870617f4
    Port:          26379/TCP
    Host Port:     0/TCP
    Command:
      /bin/bash
      -c
      if [[ -n $REDIS_PASSWORD_FILE ]]; then
        password_aux=`cat ${REDIS_PASSWORD_FILE}`
        export REDIS_PASSWORD=$password_aux
      fi
      if [[ ! -f /opt/bitnami/redis-sentinel/etc/sentinel.conf ]];then
        cp /opt/bitnami/redis-sentinel/mounted-etc/sentinel.conf /opt/bitnami/redis-sentinel/etc/sentinel.conf
        printf "\nsentinel auth-pass mymaster $REDIS_PASSWORD" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
        printf "\nrequirepass $REDIS_PASSWORD" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
      fi
      echo "Getting information about current running sentinels"
      # Get information from existing sentinels
      existing_sentinels=$(timeout -s 9 5 redis-cli --raw -h andyredis -a "$REDIS_PASSWORD" -p 26379 SENTINEL sentinels mymaster)
      echo "$existing_sentinels" | awk -f /health/parse_sentinels.awk | tee -a  /opt/bitnami/redis-sentinel/etc/sentinel.conf
      
      redis-server /opt/bitnami/redis-sentinel/etc/sentinel.conf --sentinel
      
    State:          Running
      Started:      Wed, 18 Dec 2019 15:01:24 +0900
    Ready:          True
    Restart Count:  0
    Liveness:       exec [sh -c /health/ping_sentinel.sh 5] delay=5s timeout=5s period=5s #success=1 #failure=5
    Readiness:      exec [sh -c /health/ping_sentinel.sh 5] delay=5s timeout=1s period=5s #success=1 #failure=5
    Environment:
      REDIS_PASSWORD:       <set to the key 'redis-password' in secret 'andyredis'>  Optional: false
      REDIS_SENTINEL_PORT:  26379
    Mounts:
      /data from redis-data (rw)
      /health from health (rw)
      /opt/bitnami/redis-sentinel/etc/ from sentinel-tmp-conf (rw)
      /opt/bitnami/redis-sentinel/mounted-etc from config (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-85z8c (ro)
  metrics:
    Container ID:  docker://04ccd3c4b3475943acd8937e6e4389ee3dfd81a974b50db5c6ed27461d1c0218
    Image:         docker.io/bitnami/redis-exporter:1.3.4-debian-9-r15
    Image ID:      docker-pullable://bitnami/redis-exporter@sha256:623b23a893b90f2bf2ef8b4e6c0195266215191983db4fda7b7a0cfe4c15e542
    Port:          9121/TCP
    Host Port:     0/TCP
    Command:
      /bin/bash
      -c
      if [[ -f '/secrets/redis-password' ]]; then
       export REDIS_PASSWORD=$(cat /secrets/redis-password)
      fi
      redis_exporter
      
    State:          Running
      Started:      Wed, 18 Dec 2019 15:01:24 +0900
    Ready:          True
    Restart Count:  0
    Environment:
      REDIS_ALIAS:     andyredis
      REDIS_PASSWORD:  <set to the key 'redis-password' in secret 'andyredis'>  Optional: false
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-85z8c (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  redis-data:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  redis-data-andyredis-master-0
    ReadOnly:   false
  health:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      andyredis-health
    Optional:  false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      andyredis
    Optional:  false
  redis-tmp-conf:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  sentinel-tmp-conf:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  default-token-85z8c:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-85z8c
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:          <none>
